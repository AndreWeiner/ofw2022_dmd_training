/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version 2.0;
    format ascii;
    class dictionary;
    object controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs (turbulenceModelSchemes);

application pimpleFoam;

startFrom latestTime;

startTime 0;

stopAt endTime;

endTime 90;

deltaT 0.002;

writeControl timeStep;

writeInterval 30;

purgeWrite 1;

writeFormat binary;

writePrecision 6;

writeCompression off;

timeFormat general;

timePrecision 6;

runTimeModifiable true;


functions
{
    // map p and U to coarse mesh
    mapFields1
    {
        type            mapFields;
        libs            (fieldFunctionObjects);
        mapRegion       coarseMesh;
        mapMethod       cellVolumeWeight;
        consistent      no;
        patchMap        ();
        cuttingPatches  ();
        fields
        (
            U
        );
        timeStart       0;
        timeEnd         2000;
        executeControl  timeStep;
        executeInterval 30;
        writeControl    writeTime;
        writeInterval   1;
    }

    // DMD of cube surface pressure
    // commented due to crash
/*    stdmd_cube
    {
        type            DMD;
        libs            (fieldFunctionObjects);
        DMDModel        STDMD;
        field           p;
        modeSorter      kiewat;
        nModes          50;
        maxRank         50;
        region          region0;
        patch           cube;
        enabled         true;
        log             true;
        timeStart       0;
        timeEnd         90;
        executeControl  timeStep;
        executeInterval 30;
        writeControl    onEnd;
        writeInterval   1;
    }
*/
    // DMD of coarse mesh region
    stdmd_coarse
    {
        type            DMD;
        libs            (fieldFunctionObjects);
        DMDModel        STDMD;
        field           U;
        modeSorter      kiewat;
        nModes          50;
        maxRank         50;
        region          coarseMesh;
        enabled         true;
        log             true;
        timeStart       0;
        timeEnd         90;
        executeControl  timeStep;
        executeInterval 30;
        writeControl    onEnd;
        writeInterval   1;
    }

    // cutting planes and cube surface
    surface1
    {
        type            surfaces;
        libs            (sampling);
        writeControl    writeTime;
        surfaceFormat   raw;
        formatOptions
        {
            raw 
            {
                normal true;
            }
        }
        fields          (p U);
        surfaces
        {
            cube
            {
                type patch;
                patches (cube);
                interpolate false;
                invariant true;
            }
            plane_xz
            {
                type    plane;
                source  cells;
                point   (0 4.5 0);
                normal  (0 1 0);
                // bounds  (2.0 4 0) (10 5 2);
            }
            plane_xy
            {
                type    plane;
                source  cells;
                point   (0 0 0.5);
                normal  (0 0 1);
                bounds  (2.0 2.5 0) (10 6.5 2);
            }
            plane_yz
            {
                type    plane;
                source  cells;
                point   (4 0 0);
                normal  (1 0 0);
                bounds  (3 2.5 0) (5 6.5 2);
            }
        }
    }

    // control forces acting on cube
    forces1
    {
        type            forceCoeffs;
        libs            (forces);
        writeControl    timeStep;
        writeInterval   1;
        log             false;
        patches         (cube);
        coefficients    (Cd Cs Cl);
        CofR            (0 0 0);
        liftDir         (0 1 0);
        dragDir         (1 0 0);
        pitchAxis       (0 0 1);
        rhoInf          1.0;
        rho             rhoInf;
        magUInf         1.0;
        lRef            1.0;
        Aref            1.0;
    }

    // probe velocity field
    probes1
    {
        type            probes;
        libs            (sampling);
        name            probes;
        writeControl    timeStep;
        writeInterval   1;
        startTime       0.0;
        fields          (U);
        fixedLocations  true;
        interpolationScheme cell;

        probeLocations
        (
            // upstream probes
            (3 3.5 0.5)
            (3 4.5 0.5)
            (3 5.5 0.5)
            // probes next to cube
            (4 3.5 0.5)
            (4 5.5 0.5)
            // first row of wake probes
            (5 3.5 0.5)
            (5 4.5 0.5)
            (5 5.5 0.5)
            // second row of wake probes
            (7 3.5 0.5)
            (7 4.5 0.5)
            (7 5.5 0.5)
            // probes above cube
            (3.6 4.1 1.1)
            (3.6 4.5 1.1)
            (3.6 4.9 1.1)
            (4 4.1 1.1)
            (4 4.5 1.1)
            (4 4.9 1.1)
        );
        includeOutOfBounds  false;
    }
}

// ************************************************************************* //
